class Graph:
    def __init__(self, adjac_lis):
        self.adjac_lis = adjac_lis
        self.H1 = {
            'A': 1,
            'B': 6,
            'C': 2,
            'D': 2,
            'E': 2,
            'F': 1,
            'G': 5,
            'H': 7,
            'I': 7,
            'J': 1,
            'T': 3
        }
        self.H = {
            'A': 1,
            'B': 6,
            'C': 12,
            'D': 10,
            'E': 4,
            'F': 4,
            'G': 5,
            'H': 7,
        }
        self.parent = {}
        self.openList = set()
        self.hasRevised = []
        self.solutionGraph = {}
        self.solvedNodeList = set()

    def get_neighbors(self, v):
        return self.adjac_lis.get(v, '')

    def updateNode(self, v):
        if v in self.solvedNodeList:
            return
        feasibleChildNodeList = []
        minimumCost = None
        minimumCostFeasibleChildNodesDict = {}
        print("CURRENT PROCESSING NODE:", v)
        print("___________________________")
        for (c, weight) in self.get_neighbors(v):
            feasibleChildNodeList = []
            cost = self.getHeuristicNodeValue(c) + 1
            feasibleChildNodeList.append(c)
            andNodesList = self.getAndNodes(v)
            for nodeTuple in andNodesList:
                if c in nodeTuple:
                    for andNode in nodeTuple:
                        if andNode != c:
                            feasibleChildNodeList.append(andNode)
                            cost = cost + self.getHeuristicNodeValue(andNode) + 1
            if minimumCost == None:
                minimumCost = cost
                for child in feasibleChildNodeList:
                    self.parent[child] = v
                minimumCostFeasibleChildNodesDict[minimumCost] = feasibleChildNodeList
            else:
                if minimumCost > cost:
                    minimumCost = cost
                    for child in feasibleChildNodeList:
                        self.parent[child] = v
                    minimumCostFeasibleChildNodesDict[minimumCost] = feasibleChildNodeList
        if minimumCost == None:
            minimumCost = self.getHeuristicNodeValue(v)
            self.solvedNodeList.add(v)
        else:
            self.setHeuristicNodeValue(v, minimumCost)
            for child in minimumCostFeasibleChildNodesDict[minimumCost]:
                if child not in self.solvedNodeList:
                    self.openList.add(child)
            self.solutionGraph[v] = minimumCostFeasibleChildNodesDict[minimumCost]
            solved = True
            for c in self.solutionGraph.get(v, ''):
                if c not in self.solvedNodeList:
                    solved = solved & False
            if solved == True:
                self.solvedNodeList.add(v)
        print("HEURISTIC VALUES :", self.H)
        print("OPEN LIST :", list(self.openList))
        print("MINIMUM COST NODES:", minimumCostFeasibleChildNodesDict.get(minimumCost, "[ ]"))
        print("SOLVED NODE LIST :", list(self.solvedNodeList))
        print("-----------------------------------------------------------------------------------------")

    def getAndNodes(self, v):
        andNodes = {
            'A': [('B', 'C')],
            'D': [('E', 'F')]
        }
        return andNodes.get(v, '')

    def getHeuristicNodeValue(self, n):
        return self.H.get(n, 0)

    def setHeuristicNodeValue(self, n, value):
        self.H[n] = value

    def ao_star_algorithm(self, start):
        self.openList = set([start])
        while len(self.openList) > 0:
            v = self.openList.pop()
            self.updateNode(v)
            while v != start and self.parent[v] not in self.solvedNodeList:
                parent = self.parent[v]
                self.updateNode(parent)
                v = parent
        print("TRAVERSE SOLUTION FROM ROOT TO COMPUTE THE FINAL SOLUTION GRAPH")
        print("---------------------------------------------------------------")
        print("SOLUTION GRAPH:", self.solutionGraph)
        print("\n")


nodeList1 = {
    'A': [('B', 1), ('C', 1), ('D', 1)],
    'B': [('G', 1), ('H', 1)],
    'C': [('J', 1)],
    'D': [('E', 1), ('F', 1)],
    'G': [('I', 1)]
}
nodeList = {
    'A': [('B', 1), ('C', 1), ('D', 1)],
    'B': [('G', 1), ('H', 1)],
    'D': [('E', 1), ('F', 1)]
}
graph = Graph(nodeList)
graph.ao_star_algorithm('A')

